@startuml
navigationController ^-- delegateAuthorityController
navigationController ^-- appointDepartmentRepController
navigationController ^-- changeCollecitonPointController
navigationController ^-- manageMonthlyStockDiscrepancyController

class notificationController{
    void:createstockVoucher()
}


class navigationController{
    void:homePage()
}

class stationeryRetrievalController{
    void:createStationeryRetrievalFormView()
    void:createStockAdjustmentController()
    void:loadStationeryRetrievalFormView()
    void:submitStockRetrievalForm()
    
    
}
class createStationeryRetrievalFormView{

}
class stockAdjustmentVoucherController{
    void:createSubmitAdjustmentView()
    void:addvoucher()
}


class confirmDisbursementListController{
    void:createDisbursementListDepartmentView()
    void:createDisbursementListEmployeeView()
    void:notsurewhatControllertoUseAfterClickConfirm()
}
class disbursementListDepartmentView{

}
class disbursementListEmployeeView{

}

class RequisitionTrackingController{
    void:createTrackTheOutstandingRequisitionView()
    void:loadTrackTheOutstandingRequisitionView()
    void:createOrderController()
}
class trackTheOutstandingRequisitionView{

}
class monthlyInventoryController{
    void:createMonthlyInventoryStatusReportView()
    void:createMonthlyInventoryDetailsController()
}
class monthlyInventoryDetailsController{
    void:createMonthlyInventoryStatusDetailsView()
    void:submitInventoryStatus()
}
class MonthlyInventoryStatusReportView{

}
class MonthlyInventoryStatusDetailsView{

}

class manageMonthlyStockDiscrepancyController{
    void:createManageMonthlyStockDiscrepancyView()
    void:createPopup()
    void:submitAdjustmentVoucher()
    void:loadManageMonthlyStockDiscrepancyView()


}
class manageMonthlyStockDiscrepancyView{

}
class popupView{

}

' Ordering Package
class createOrdersController <<Controller>> {
    ActionItem: homePage()
    ActionItem: searchReorderDetailsByCategoryAndDescription(Category category, string searchTerm)
    ActionItem: goToOrderQuantity(ReorderItemsForm items)
    ActionItem: backToItemCatalogue(ReorderItemsForm items)
    ActionItem: goToPlaceOrder(ReorderQuantitiesForm quantities)
    ActionItem: backToOrderQuantity(ReorderQuantitiesForm quantities)
    ActionItem: submitOrder(ReorderForm reorderForm)
    ActionItem: downloadPurchaseOrders(int OrderId)
}

class viewReceivedOrdersListController <<Controller>> {
    ' serves as back route from Received Orders Details page
    ActionItem: viewPastReceivedOrdersList()
    ActionItem: viewPastOrder(int orderId)
    ActionItem: homePage()
}

class restockInventoryController <<ApiController>> {
    List<OrderSupplierDetails>: getOrderSupplierDetails(int orderId, int supplierId)
    void: updateOrderSupplierDetail(int orderSupplierDetailId, int quantityReceived)
}

class submitInvoiceController <<Controller>> {
    ActionItem: viewSubmitInvoice()
    void: submitInvoice(File invoice)
}

@enduml
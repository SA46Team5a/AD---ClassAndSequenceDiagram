@startuml
navigationController ^-- delegateAuthorityController
navigationController ^-- appointDepartmentRepController
navigationController ^-- changeCollecitonPointController
navigationController ^-- manageMonthlyStockDiscrepancyController

class notificationController{
    void:createstockVoucher()
}


class navigationController{
    void:homePage()
}

class ViewStationeryCatalogueView{
}

class RequisitionController{
    void:createViewStationeryCatalogueView()
    void:requestItem(item,qty)
    void:loadMakeStationeryRequestForm()
    void:loadViewStationeryCatalogueView()
    void:deleteRequestedItems()
    void:saveChanges()
    void:submitRequest()
}

class MakeEditStationeryRequestFormView{
}
class ViewPastRequestController{
    void:createSearchRequisitionForm()
    void:loadSearchRequisitionForm(startDate,endDate,approvalStatus)
    void:loadViewStationeryRequestForm(ReqID)
    void:(edit)loadMakeStationeryRequestForm(sameInRequisitonController)
    void:deleteRequisitionForm()
}
class searchRequisitionFormView{

}
class ViewStationeryRequestForm{

}

class approveRequisitionFormController{
    void:createApproveRequisitionFormView()
    void:approveReq(reqID)
    void:rejectReq(reqID)
}

class approveRequisitionFormView{

}


 class delegateAuthorityController{
    void:createDelegateAuthorityView()
    void:confirmDelegation(empID,startDate,endDate)

    void:rescindDelegation(empID)
}

class delegateAuthorityView{

}

class appointDepartmentRepController{
    void:createAppointDepartmentRepView()
    void:confirmDepartmentRep(repID)

}

class appointDepartmentRepView{

}

class changeCollecitonPointController{
    void:confirmChangeCollectionPoint()
}

class changeCollectionPointView{

}
class stationeryRetrievalController{
    void:createStationeryRetrievalFormView()
    void:createStockAdjustmentController()
    void:loadStationeryRetrievalFormView()
    void:submitStockRetrievalForm()
    
    
}
class createStationeryRetrievalFormView{

}
class stockAdjustmentVoucherController{
    void:createSubmitAdjustmentView()
    void:addvoucher()
}


class confirmDisbursementListController{
    void:createDisbursementListDepartmentView()
    void:createDisbursementListEmployeeView()
    void:notsurewhatControllertoUseAfterClickConfirm()
}
class disbursementListDepartmentView{

}
class disbursementListEmployeeView{

}

class RequisitionTrackingController{
    void:createTrackTheOutstandingRequisitionView()
    void:loadTrackTheOutstandingRequisitionView()
    void:createOrderController()
}
class trackTheOutstandingRequisitionView{

}
class monthlyInventoryController{
    void:createMonthlyInventoryStatusReportView()
    void:createMonthlyInventoryDetailsController()
}
class monthlyInventoryDetailsController{
    void:createMonthlyInventoryStatusDetailsView()
    void:submitInventoryStatus()
}
class MonthlyInventoryStatusReportView{

}
class MonthlyInventoryStatusDetailsView{

}

class manageMonthlyStockDiscrepancyController{
    void:createManageMonthlyStockDiscrepancyView()
    void:createPopup()
    void:submitAdjustmentVoucher()
    void:loadManageMonthlyStockDiscrepancyView()


}
class manageMonthlyStockDiscrepancyView{

}
class popupView{

}

class createOrdersController {
    void: homePage()
    void: searchReorderDetailsByCategoryAndDescription(Category category, string searchTerm)
    void: goToOrderQuantity(ReorderItemsForm items)
    void: backToItemCatalogue(ReorderItemsForm items)
    void: goToPlaceOrder(ReorderQuantitiesForm quantities)
    void: backToOrderQuantity(ReorderQuantitiesForm quantities)
    void: submitOrder(ReorderForm reorderForm)
    void: downloadPurchaseOrders(int OrderId)
}

class viewReceivedOrdersList {
    ' serves as back route from Received Orders Details page
    void: viewPastReceivedOrdersList()
    void: viewPastOrder(int orderId)
    void: homePage()
}

class 
@enduml




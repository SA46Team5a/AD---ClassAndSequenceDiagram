[X] 2.2.1 Make new request
[X] 2.2.2 View Past Requsition Forms
[X] 2.2.4 Approve Requisition Forms
[X] 2.2.6 Delegate Authority
[X] 2.2.7 Appoint Department Department Representative
[X] 2.2.8 Change Collection Point

@startuml
class ClassificationService <<Service>> {
    --Retrieve--
    +List<Category>: getCategories()
    +List<ApprovalStatus>: getApprovalStatus()
    +List<RetrievalStatus>: getRetrievalStatus()
    +List<CollectionPoint>: getCollectionPoints()
}

class RequisitionService <<Service>> {
    --Retrieve--
    ' RequisitionDetails can be retrieved from Requisition object
    ' If no unsubmitted requsition, create new Requisition object for employee
    +Requisition: getUnsubmittedRequisitionOfEmployee(Employee emp)  
    +List<Requisition>: getRequisitionsOfEmployee(Employee emp)
    +List<Requisition>: getSubmittedRequisitionsOfDepartment(Department dep)
    +List<Requisition>: getRequisitionsOfCategory(Category cat)
    +List<Requisition>: getAllApprovedUnretrievedRequisitions()
    ' Gets data from RetrievalItems View
    +List<RetrievalItem>: getItemRetrievalAndStockCount()
    +List<OutstandingRequisitionItems>: getOutstandingRequisitionItems()

    --Create--
    +Requisition: createNewRequisitionForEmployee(Employee emp)
    +void: addNewRequisitionDetail(Requisition req, RequisitionDetail rd)

    --Update--
    ' Loops through list and calls updateRequsitionDetail
    +void: updateRequisitionDetails(List<int> reqDetailIds, int newQuantities)
    +void: updateRequisitionDetail(int reqDetailId, int newQuantity)
    +void: submitRequsition(int reqId)
    +void: rejectRequisition(Requisition req)
    +void: approveRequisition(Requisition req)

    --Delete--
    +void: deleteRequisition(int reqId)
    +void: deleteRequisitionDetail(int reqDetailId)
}

class DisbursementService <<stereotype>> {
    --Retrieve--
    +List<Disbursements>: getDisbursementsByDep(Department dep)

    --Create--

    --Update--
    +void: confirmDisbursement(List<int> disbursementIds)
    ' calls StockManagementService.addStockVoucher if disbursed count and collected count is different
    +void: confirmDisbursementDetails()

    --Delete--
}

class OrderService {
    --Retrieve--
    ' Loops through and calls the second method
    +Order: getFirstOrderAfterDateWithItem(Date date, Item item)
    +List<Order>: getReceivedOrders()
    +List<ReorderDetail>: getReorderDetails()

    --Create--
    ' createNewOrder will call addOrder, addOrderSupplier and addOrderSupplierDetails
    +void: createNewOrder(Dictionary<Supplier, Dictionary<Item, int>> availableStockFromSupplier)
    -void: addOrder(Order o)
    -void: addOrderSupplier(OrderSupplier os)
    -void: addOrderSupplierDetails(OrderSupplierDetails osd)

    --Update--
    +void: updateOrderStatus(int orderSupplierId, OrderStatus status)
    +void: updateInvoiceUploadStatus(int orderSupplierId, InvoiceUploadStatus status)
    +void: updateOrderSupplierDetailsQtyReceived(int orderSupplierDetailsId, int qtyReceived)

    --Delete--
}

class StockManagementService <<Service>> {
    --Retrieve--
    +int: getAllItems()
    +int: getStockCountOfItem(Item item)
    +List<Item>: getItemsOfCategory()
    +List<Vouchers>: getOpenVouchers(bool isStoreManager) 
    +List<Supplier>: getFirstSupplierOfEachItem()
    +Supplier: getFirstSupplierOfItem(Item item)
    +List<Supplier>: getSupplierByItems(List<Item> items>)

    --Create--
    +void: addStockTransaction(StockTransaction st)
    +void: addStockVoucher(StockVoucher sv)
    ' Stock is rejected at disbursement. Insert a stockTransaction to add qty rejected back, and raise a stockVoucher
    +void: rejectStock(StockTransaction st, StockVoucher sv)

    --Update--
    +void: closeVoucher(StockVoucher sv)
}

class DepartmentService <<Service>> {
    --Retrieve--
    ' Get authorised person based on current date
    +Authority: getAuthority()
    +DepartmentRepresentative: getDepartmentRepresentative(Department dep)
    +CollectionPoint: getCollectionPointOfDepartment(Department dep)
    +boolean: verifyPassCode(int passcode)

    --Create--
    ' Add emp as Authority with start and end date, and add Dep Head with start date = emp end date + 1
    +void: addAuthority(Employee emp)

    --Update--
    +void: updateAuthority(Authority auth)
    +void: rescindAuthority(Authority auth)
    +void: updateDepartmentRepresentative(Department dep, Employee emp)
    +void: updateCollectionPoint(Department dep, CollectionPoint cp)

    --Delete--
}

class ReportService <<Service>>{
    ' To discuss with Khim Yang on how he wants the data to be stuctured
}

class template <<Stereotype>> {
    --Retrieve--
    --Create--
    --Update--
    --Delete--
}
@enduml